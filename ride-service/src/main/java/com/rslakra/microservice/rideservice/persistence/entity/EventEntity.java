package com.rslakra.microservice.rideservice.persistence.entity;

import com.rslakra.frameworks.core.Payload;
import com.rslakra.frameworks.core.ToString;
import com.rslakra.frameworks.spring.persistence.entity.NoAutoGeneratedIdEntity;
import io.hypersistence.utils.hibernate.type.json.JsonType;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;

import java.util.UUID;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;

/**
 * Represents <code>Events</code> table.
 * <p>
 * Reference(s):
 *
 * <code>
 * https://vladmihalcea.com/how-to-map-json-objects-using-generic-hibernate-types/
 * https://stackoverflow.com/questions/39620317/how-to-map-a-json-column-with-h2-jpa-and-hibernate
 * </code>
 *
 * @author Rohtash Lakra
 * @created 7/31/23 10:21 PM
 */
@Getter
@Setter
@NoArgsConstructor
@Entity
@Table(name = "events")
// The @TypeDef annotations can be applied to a base entity class
@TypeDef(name = "json", typeClass = JsonType.class)
public class EventEntity extends NoAutoGeneratedIdEntity<UUID> {

    @Column(name = "event_type")
    private String eventType;

    // json event_data
    @Type(type = "json")
    @Column(name = "event_data", columnDefinition = "json")
    private Payload<String, Object> eventData;

    /**
     * Returns the string representation of this object.
     *
     * @return
     */
    @Override
    public String toString() {
        return ToString.of(Ride.class)
            .add("id", getId())
            .add("eventType", getEventType())
            .add("eventData", getEventData())
            .toString();
    }

}
