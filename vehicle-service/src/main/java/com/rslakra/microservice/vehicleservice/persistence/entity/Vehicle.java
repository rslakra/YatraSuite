package com.rslakra.microservice.vehicleservice.persistence.entity;

import com.rslakra.frameworks.core.BeanUtils;
import com.rslakra.frameworks.core.ToString;
import com.rslakra.frameworks.spring.persistence.entity.NoAutoGeneratedIdEntity;
import io.hypersistence.utils.hibernate.type.json.JsonType;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Transient;

/**
 * The <code>Vehicles</code> entity stores the vehicle info.
 *
 * @author Rohtash Lakra
 * @created 7/25/23 8:50 PM
 */
@Getter
@Setter
@NoArgsConstructor
@Entity
@Table(name = "vehicles")
// The @TypeDef annotations can be applied to a base entity class
@TypeDef(name = "json", typeClass = JsonType.class)
public class Vehicle extends NoAutoGeneratedIdEntity<UUID> {

    //    @Column(name = "serial_number", updatable = false)
    @Column(name = "serial_number")
    private Integer serialNumber;

    @Column(name = "battery_level")
    private Integer batteryLevel;

    @Column(name = "last_ride_start")
    private LocalDateTime lastRideStart;

    @Column(name = "last_ride_end")
    private LocalDateTime lastRideEnd;

    //    @OneToOne(mappedBy = "vehicle", cascade = CascadeType.ALL)
//    @PrimaryKeyJoinColumn
//    @Setter(AccessLevel.NONE)
//    @OneToOne(mappedBy = "vehicle", fetch = FetchType.EAGER, cascade = CascadeType.ALL)
//    private VehicleDetail vehicleDetail;
    @Type(type = "json")
    @Column(name = "vehicle_info", columnDefinition = "json")
    private VehicleInfo vehicleInfo;

    //    @OneToMany(fetch = FetchType.LAZY, mappedBy = "vehicle", cascade = CascadeType.ALL)
//    @Transient
    @OneToMany(mappedBy = "vehicle", fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true)
//    @OneToMany(fetch = FetchType.LAZY, mappedBy = "vehicle", cascade = CascadeType.ALL)
    @OrderBy("createdAt DESC")
    private List<LocationHistory> locationHistories;

    /**
     * Adds the <code>LocationHistory</code> object.
     *
     * @param vehicleDetail
     */
//    public void setVehicleDetail(VehicleDetail vehicleDetail) {
//        if (BeanUtils.isNotNull(vehicleDetail)) {
//            vehicleDetail.setVehicle(this);
//        }
//        this.vehicleDetail = vehicleDetail;
//    }

    /**
     * Adds the <code>LocationHistory</code> object.
     *
     * @param locationHistory
     */
    public void addLocationHistory(LocationHistory locationHistory) {
        if (locationHistories == null) {
            locationHistories = new ArrayList<>();
        }

        locationHistory.setVehicle(this);
        locationHistories.add(locationHistory);
    }

    /**
     * Removes the <code>LocationHistory</code> object.
     *
     * @param locationHistory
     */
    public void removeLocationHistory(LocationHistory locationHistory) {
        if (BeanUtils.isNotEmpty(getLocationHistories())) {
            locationHistories.remove(locationHistory);
            locationHistory.setVehicle(null);
        }
    }

    /**
     * Returns the last available vehicle history
     *
     * @return
     */
    public LocationHistory getLastLocationHistory() {
        return getLocationHistories().stream()
//            .filter(locationHistory -> !locationHistory.isInUse())
            .findFirst()
            .orElse(null);
    }

    /**
     * @return
     */
    @Transient
    public Boolean isInUse() {
//        return (getLocationHistories().size() > 0 ? getLastLocationHistory().isInUse() : false);
        if (BeanUtils.isNull(getLastRideStart())) {
            return false;
        } else if (BeanUtils.isNull(getLastRideEnd())) {
            return true;
        } else {
            return getLastRideStart().isAfter(getLastRideEnd());
        }
    }

    /**
     * Returns the string representation of this object.
     *
     * @return
     */
    @Override
    public String toString() {
        return ToString.of(Vehicle.class)
            .add("id", getId())
            .add("serialNumber", getSerialNumber())
            .add("batteryLevel", getBatteryLevel())
            .add("vehicleInfo", getVehicleInfo())
//            .add("vehicleDetail", getVehicleDetail())
            .add("locationHistories", getLocationHistories())
            .toString();
    }
}
